generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Intern {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(100)
  surname String @db.VarChar(100)
  email   String @unique @db.VarChar(50)

  explorerId       String @unique @db.VarChar(50)
  explorerMail     String @unique @db.VarChar(50)
  explorerPassword String @db.VarChar(50)

  discordId       String? @unique @db.VarChar(100)
  discordNickname String? @unique @db.VarChar(50)

  cohort String? @db.VarChar(50)

  teachableId String? @unique @db.VarChar(15)

  age      Int    @db.TinyInt
  city     String @db.VarChar(50)
  country  String @db.VarChar(50)
  timezone String @db.VarChar(50)

  internCourseRole InternCourseRole[] @relation(name: "InternCourseRole: intern")

  feedbackOnIntern      FeedbackOnIntern[]      @relation(name: "FeedbackOnIntern: intern")
  feedbackOnInternGiven FeedbackOnIntern[] @relation(name: "FeedbackOnIntern: sender")
  feedbackOnFacilitator FeedbackOnFacilitator[] @relation(name: "FeedbackOnFacilitator: intern")
  feedbackOnFacilitatorGiven FeedbackOnFacilitator[] @relation(name: "FeedbackOnFacilitator: sender")

  eventInternBadge EventInternBadge[] @relation(name: "EventInternBadge: intern")

  courseResult CourseResult[] @relation(name: "CourseResult: Intern")
}

model Course {
  id                   Int      @id @default(autoincrement())
  courseName           String   @db.VarChar(150)
  courseCipher         String   @unique @db.VarChar(50)
  linkToClassMaterials String?  @db.VarChar(150)
  startDate            DateTime
  endDate              DateTime

  classEvent   ClassEvent[]
  internCourse InternCourseRole[] @relation(name: "InternCourseRole: course")

  courseResult CourseResult[] @relation(name: "CourseResult: Course")
}

model ClassEvent {
  id             Int      @id @default(autoincrement())
  meetNumber     Int      @db.TinyInt
  eventDate      DateTime
  googleMeetLink String   @db.VarChar(50)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  eventInternBadge      EventInternBadge[]      @relation(name: "EventInternBadge: classEvent")
  eventFeedback         EventFeedback[]         @relation(name: "EventFeedback: classEvent")
  feedbackOnIntern      FeedbackOnIntern[]      @relation(name: "FeedbackOnIntern: classEvent")
  feedbackOnFacilitator FeedbackOnFacilitator[] @relation(name: "FeedbackOnFacilitator: classEvent")

  @@unique([courseId, meetNumber])
}

model EventFeedback {
  id Int @id @default(autoincrement())

  classEventId Int @unique
  classEvent   ClassEvent? @relation(fields: [classEventId], references: [id], name: "EventFeedback: classEvent", onDelete: Cascade)

  feedback String @db.VarChar(500)
}

model Badge {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(30)
  eventInternBadge EventInternBadge[] @relation(name: "EventInternBadge: badge")
}

model CourseResult {
  id Int @id @default(autoincrement())

  masteryResult String @db.VarChar(50)
  englishLevel  String @db.VarChar(50)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "CourseResult: Intern", onDelete: Cascade)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], name: "CourseResult: Course", onDelete: Cascade)

  @@unique([internId, courseId])
}

model FeedbackOnIntern {
  id Int @id @default(autoincrement())

  attendance            Boolean @default(false)
  techCheck             String  @db.VarChar(50)
  participationActivity String  @db.VarChar(500)
  comment               String? @db.VarChar(300)

  senderId Int
  sender Intern @relation(fields: [senderId], references: [id], name: "FeedbackOnIntern: sender", onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "FeedbackOnIntern: intern", onDelete: Cascade)

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id], name: "FeedbackOnIntern: classEvent", onDelete: Cascade)

  @@unique([senderId, internId, classEventId])
}

model FeedbackOnFacilitator {
  id Int @id @default(autoincrement())

  attendance                  Boolean @default(false)
  techCheck                   String  @db.VarChar(50)
  english                     String  @db.VarChar(50)
  isEncouraging               Boolean @default(false)
  isOpenAsked                 Boolean @default(false)
  naturalCommunications       String
  isPrepared                  Boolean @default(false)
  isCheckedUnderstanding       Boolean @default(false)
  isFacilitatorBrief          Boolean @default(false)
  publicSpeakingSkills        String  @db.VarChar(130)
  isPunctual                  Boolean @default(false)
  isOnTimeAttendanceFeedback  Boolean @default(false)
  isOptimalScreenPresentation Boolean @default(false)

  senderId Int
  sender Intern @relation(fields: [senderId], references: [id], name: "FeedbackOnFacilitator: sender", onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "FeedbackOnFacilitator: intern", onDelete: Cascade)

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id], name: "FeedbackOnFacilitator: classEvent", onDelete: Cascade)

  @@unique([senderId, internId, classEventId])

}

model EventInternBadge {
  id Int @id @default(autoincrement())

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id], name: "EventInternBadge: classEvent", onDelete: Cascade)

  badgeId Int
  badge   Badge @relation(fields: [badgeId], references: [id], name: "EventInternBadge: badge", onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "EventInternBadge: intern", onDelete: Cascade)
}

model InternCourseRole {
  id Int @id @default(autoincrement())

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], name: "InternCourseRole: course", onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "InternCourseRole: intern", onDelete: Cascade)

  classRoleId Int
  classRole   ClassRole @relation(fields: [classRoleId], references: [id], name: "InternCourseRole: classRole", onDelete: Cascade)

  @@unique([courseId, internId, classRoleId])
}

model ClassRole {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  internCourseRole InternCourseRole[] @relation(name: "InternCourseRole: classRole")
}

model CohortSchedule {
  id        Int       @id @default(autoincrement())
  eventDate DateTime?
  eventName String    @db.VarChar(80)
  cohort    String    @db.VarChar(50)
}
